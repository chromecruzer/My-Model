import Express from"express";import OpenAI from"openai";import dotenv from"dotenv";import twilio from"twilio";import{createInterface}from"readline";import bodyParser from"body-parser";import{spawn}from"child_process";const app=Express();const port=2400;app.set("view engine","pug");app.use(Express.json());app.use(Express.static("public"));app.use(bodyParser.json());app.use(bodyParser.urlencoded({extended:true}));dotenv.config();const openai=new OpenAI({apiKey:process.env.OPENAI_key});import{MongoClient}from"mongodb";const url=process.env.MONGO_URI;const dbName="test";async function connectToMongoDB(){const client=new MongoClient(url);try{await client.connect();console.log("Connected to MongoDB server");const db=client.db(dbName);return{db:db,client:client}}catch(error){console.error("Error connecting to MongoDB:",error);throw error}}async function saveChatToMongoDB(chat){let client;try{const{db:db,client:connectedClient}=await connectToMongoDB();client=connectedClient;const collection=db.collection("openai");const result=await collection.insertOne(chat);console.log("Chat saved to MongoDB:",result.insertedId)}catch(error){console.error("Error saving chat to MongoDB:",error);throw error}finally{if(client){await client.close();console.log("MongoDB client disconnected")}}}app.use(Express.static("public"));app.get("/",((req,res)=>{function getCurrentDate(){const now=new Date;const day=String(now.getDate()).padStart(2,"0");const month=String(now.getMonth()+1).padStart(2,"0");const year=String(now.getFullYear());return`${day}${month}${year}`}const currentDate=getCurrentDate();const today=new Date;if(currentDate===`${today.getDate()}${today.getMonth()+1}${today.getFullYear()}`){res.render("gpt")}else{res.render("index",{currentDate:currentDate})}}));app.post("/chat",(async(req,res)=>{const userMessage=req.body.message;try{const completion=await openai.chat.completions.create({messages:[{role:"user",content:userMessage}],model:"gpt-3.5-turbo"});const gptResponse=completion.choices[0].message.content;res.json({message:gptResponse});const chat={date:new Date,user:req.body.message,gpt:completion.choices[0].message.content};await saveChatToMongoDB(chat)}catch(error){console.error("Error processing message:",error);res.status(500).json({error:"An error occurred while processing the message"})}}));app.post("/verify-otp",(async(req,res)=>{try{const otpCode=req.body.otp;const client=twilio(process.env.accountSid,process.env.authToken);const verificationResult=await client.verify.v2.services(process.env.verifySid).verificationChecks.create({to:process.env.PhoneIND_91,code:otpCode});if(verificationResult.status==="approved"){res.render("gpt")}else if(verificationResult.status==="pending"){res.status(400).send("Please try again.")}else{res.status(400).json({success:false,message:"Invalid OTP code."})}const child=spawn("powershell",["-Command","-"]);child.stdin.setEncoding("utf-8");child.stdout.pipe(process.stdout);child.stdin.write(`Write-Host "${verificationResult.status}"\n`);child.stdin.end()}catch(error){console.error("Error verifying OTP:",error);res.status(500).json({success:false,message:"An error occurred while verifying OTP."})}}));app.get("/xotpx",((req,res)=>{triggerOTP()}));function triggerOTP(){const accountSid=process.env.accountSid;const authToken=process.env.authToken;const verifySid=process.env.verifySid;const client=twilio(accountSid,authToken);client.verify.v2.services(verifySid).verifications.create({to:process.env.PhoneIND_91,channel:"sms"}).then((verification=>console.log(verification.status))).then((()=>{const readline=createInterface({input:process.stdin,output:process.stdout});readline.question("Please enter the OTP:",(otpCode=>{client.verify.v2.services(verifySid).verificationChecks.create({to:process.env.PhoneIND_91,code:otpCode}).then((verification_check=>console.log(verification_check.status))).then((()=>readline.close()))}))}))}app.listen(port,(()=>{console.log(`Server is running on port ${port}`)}));